@inject AppState AppState;
@inject TimelineViewModel ViewModel;
@using BuffTracker.ViewModels
@implements IDisposable

<div class="container">
    <MudText>Timeline</MudText>
    
    <MudNumericField @bind-Value="AppState.CurrentRound" 
                     Label="Round"
                     Variant="Variant.Outlined"
                     Min="0"></MudNumericField>
    <MudButton Variant="Variant.Filled" @onclick="@AddRound">Add Round</MudButton>
    @if (AppState.CurrentRound > 0)
    {
        <MudButton Variant="Variant.Filled" @onclick="@SubtractRound">Remove Round</MudButton>
    }
    else
    {
        <MudButton Variant="Variant.Filled" @onclick="@SubtractRound" Disabled="true">Remove Round</MudButton>
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        AppState.StateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        AppState.SaveState();
        AppState.StateChanged -= StateHasChanged;
    }

    private void AddRound() => AppState.CurrentRound = ViewModel.IncrementRound(AppState.CurrentRound);
    private void SubtractRound() => AppState.CurrentRound = ViewModel.DecrementRound(AppState.CurrentRound);
}
